@using Nsu.Belov.TrainsDatabase.Web.Models
@using Reinforced.Lattice.CellTemplating
@using Reinforced.Lattice.Commands
@using Reinforced.Lattice.Configuration
@using Reinforced.Lattice.Editing.Editors.PlainText
@using Reinforced.Lattice.Editing.Form
@using Reinforced.Lattice.Filters
@using Reinforced.Lattice.Filters.Select
@using Reinforced.Lattice.Filters.Value
@using Reinforced.Lattice.Mvc
@using Reinforced.Lattice.Plugins.Toolbar
@using Reinforced.Lattice.Templates
@model TripPointForViewModel

@{
    ViewBag.Title = "TripPointsForTrip";

    var conf = Model.Configurator;
    conf.Column(x => x.DepartureTime).Format("`parseDateTime({#})`").Title("Время отправления");
    conf.Column(x => x.ArrivalTime).Format("`parseDateTime({#})`").Title("Время прибытия");
    conf.Column(x => x.TripId).DataOnly();
    conf.Column(x => x.StationName).Title("Название станции")
        .FilterSelectUi(x => x.SelectAny(anyText: "Все")
            .SelectItems(Model.StationNames).ClientFiltering());

    if (User.IsInRole("operator"))
    {
        conf.EditingForm(f =>
        {
            f.EditPlainText(x => x.ArrivalTime);
            f.EditPlainText(x => x.DepartureTime);
            f.EditPlainText(x => x.DelayinMinutes);
            f.RenderTo("#ltcModal");
        }, c => c.Event("click").Selector("._beginEdit"));
        conf.Toolbar("toolbar-rt", x => { x.AddSimpleButton("Add new").AddNewByForm(); });

        conf.AddUiColumn<string>("Редактирование")
            .Razor(@<div>
                       <button class="btn btn-xs btn-warning _beginEdit">
                           <span class="glyphicon glyphicon-pencil"></span>
                       </button>
                       <button class="btn btn-xs btn-danger _remove">
                           <span class="glyphicon glyphicon-remove"></span>
                       </button>
                   </div>)
            .SubscribeCellEvent(x => x.Command("click", "Remove").Selector("._remove"));
        conf.Command("Remove", x => x.ConfigureRemoval());
    }
    // conf.Column(x => x.TripId).FilterValueUi(ui => ui.ClientFiltering());
    conf.Column(x => x.StationOrder).Title("Порядковый номер станции в маршруте").FilterValueUi(ui => ui.ClientFiltering());
    conf.Column(x => x.DepartureTime).FilterValueUi(ui => ui.CompareOnlyDates().ClientFiltering());
    conf.Column(x => x.ArrivalTime).FilterValueUi(ui => ui.CompareOnlyDates().ClientFiltering());
    conf.Column(x => x.FirstClassSeatsLeft).Title("Осталось билетов первого класса").FilterValueUi(ui => ui.ClientFiltering());
    conf.Column(x => x.SecondClassSeatsLeft).Title("Осталось билетов второго класса").FilterValueUi(ui => ui.ClientFiltering());
    conf.Column(x => x.DelayinMinutes).Title("На ... мин. задердивается").FilterValueUi(ui => ui.ClientFiltering());
}
<h2>TripPointsForTrip</h2>

<div id="table"></div>

@section scripts {
    @{ Html.RenderPartial("DeleteTemplate"); }
    @* Render our templates *@
    @{ Html.RenderTemplates("lt", "Lattice_Templates_Bootstrap"); }

    @* Instantiate our table and put it to JS window.$$table variable *@
    @Model.Configurator.InitializationScript("table", "window.$$table")
}